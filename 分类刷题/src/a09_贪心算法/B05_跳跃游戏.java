package a09_贪心算法;

/**
 * @author: fosss
 * Date: 2023/8/20
 * Time: 11:15
 * Description:
 * 给定一个非负整数数组，你最初位于数组的第一个位置。数组中的每个元素代表你在该位置可以跳跃的最大长度。判断你是否能够到达最后一个位置。
 * 示例  1:
 * 输入: [2,3,1,1,4]
 * 输出: true
 * 解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。
 * 示例  2:
 * 输入: [3,2,1,0,4]
 * 输出: false
 * 解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。
 */
public class B05_跳跃游戏 {

    /**
     * 不一定非要明确一次究竟跳几步，每次取最大的跳跃步数，这个就是可以跳跃的覆盖范围。这个范围内，别管是怎么跳的，反正一定可以跳过来
     * 贪心算法局部最优解：每次取最大跳跃步数（取最大覆盖范围），整体最优解：最后得到整体最大覆盖范围，看是否能到终点。
     */
    public boolean canJump(int[] nums) {
        //覆盖范围，总共能跳跃的最大下标。
        int cover = 0;
        //每次遍历的下标范围为[i,cover]。cover是实时更新的
        for (int i = 0; i <= cover; i++) {
            //更新覆盖范围最大值。cover为目前得到的覆盖范围（i在这个范围内），i为目前已经走过的举例，i+nums[i]为i能覆盖到的范围加上已经走过的
            //范围，判断哪个范围大
            cover = Math.max(i + nums[i], cover);
            //覆盖范围已经达到数组下标最大值，一定能够到达最后一个元素
            if (cover >= nums.length - 1) return true;
        }
        return false;
    }
}












