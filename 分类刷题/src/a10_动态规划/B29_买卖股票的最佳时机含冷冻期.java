package a10_动态规划;

/**
 * @author: fosss
 * Date: 2023/9/30
 * Time: 17:33
 * Description:
 * https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/
 * 给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。
 * 设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
 * 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 * 卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
 * 示例:
 * 输入: [1,2,3,0,2]
 * 输出: 3
 * 解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]
 */
public class B29_买卖股票的最佳时机含冷冻期 {

    /**
     * 由于卖出股票后，第二天无法买入股票，所以每日状态不能单纯定义为持有和卖出
     * 状态定义：
     * 0：持有股票：可能是今天买的，也可能是之前买的一直没有卖 dp[i][0]=max(dp[i-1][0],prices[i]-dp[i-1][)
     * 1：今天卖出股票
     * 2：冷冻期，昨天卖出股票
     * 3. 保持卖出状态，至少两天前卖出的
     */
    public int maxProfit(int[] prices) {
        int[][] dp = new int[prices.length][4];
        //初始化,第一天买入花费
        dp[0][0] = prices[0];

        for (int i = 1; i < prices.length; i++) {
            //第i天买入股票的花费：肯定不是昨天卖出的，min(前一天的价格dp[i-1][0]，今天的价格-前一天是卖出状态时已经赚的钱，今天的价格-前一天是冷冻期时已经赚的钱)
            dp[i][0] = Math.min(dp[i - 1][0], Math.min(prices[i] - dp[i - 1][3], prices[i] - dp[i - 1][2]));
            //第i天卖出股票赚的钱：今天卖，那么昨天肯定没有卖，所以只需max(0,今天的价格-保持买入状态时的价格),与0比较是为了保证只要卖出就一定是不亏的
            dp[i][1] = prices[i] - dp[i - 1][0];
            //第i天是冷冻期时已经赚的钱：昨天卖出的，所以为昨天卖出赚的钱
            dp[i][2] = dp[i - 1][1];
            //第i天保持卖出状态已经赚的钱：max( 昨天是卖出状态已经赚的钱，昨天是冷冻期已经赚的钱 )
            dp[i][3] = Math.max(dp[i - 1][3], dp[i - 1][2]);
        }
        //从除了持有股票的三种状态中找最大值
        int n = prices.length - 1;
        return Math.max(dp[n][1], Math.max(dp[n][2], dp[n][3]));
    }
}
