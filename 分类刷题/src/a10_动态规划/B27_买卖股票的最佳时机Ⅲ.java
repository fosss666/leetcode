package a10_动态规划;

/**
 * @author: fosss
 * Date: 2023/9/28
 * Time: 19:40
 * Description:
 * 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。设计一个算法来计算你所能获取的最大利润。你`最多`可以完成 两笔 交易。
 * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 * 示例 1:
 * 输入：prices = [3,3,5,0,0,3,1,4]
 * 输出：6 解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。随后，在第 7 天
 * （股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3。
 * 示例 2：
 * 输入：prices = [1,2,3,4,5]
 * 输出：4 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4。注意你不能在第
 * 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 * 示例 3：
 * 输入：prices = [7,6,4,3,1]
 * 输出：0 解释：在这个情况下, 没有交易完成, 所以最大利润为0。
 * 示例 4：
 * 输入：prices = [1] 输出：0
 * 提示：
 * 1 <= prices.length <= 10^5
 * 0 <= prices[i] <= 10^5
 */
public class B27_买卖股票的最佳时机Ⅲ {

    public static void main(String[] args) {
        B27_买卖股票的最佳时机Ⅲ test = new B27_买卖股票的最佳时机Ⅲ();
        int res = test.maxProfit(new int[]{2, 4, 1});
        System.out.println("res = " + res);
    }

    public int maxProfit(int[] prices) {
        //一共四种状态，分别是第一次买入，第一次卖出，第二次买入，第二次卖出
        //dp[i][0]表示遍历到第i天第一次买入花的钱，dp[i][1]表示第一次卖出赚的钱，dp[i][2]表示第二次买入花的钱，dp[i][3]表示第二次卖出赚的钱
        int[][] dp = new int[prices.length][4];
        //初始化
        dp[0][0] = prices[0];
        dp[0][1] = 0;
        dp[0][2] = prices[0];
        dp[0][3] = 0;

        for (int i = 1; i < prices.length; i++) {
            //比较买入价格，留下小的价格
            dp[i][0] = Math.min(dp[i - 1][0], prices[i]);
            //比较卖出赚的钱，留下赚的多的
            dp[i][1] = Math.max(dp[i - 1][1], prices[i] - dp[i - 1][0]);
            //比较第二次买入价格，留下小的价格。由于是第二次买入，应该让总体的买入花的钱最少，所以应该减去第一次卖出赚的钱
            dp[i][2] = Math.min(dp[i - 1][2], prices[i] - dp[i - 1][1]);
            //比较第二次卖出赚的钱，留下赚的多的
            dp[i][3] = Math.max(dp[i - 1][3], prices[i] - dp[i - 1][2]);
        }
        return dp[prices.length - 1][3];
    }

    /**
     * 空间优化，观察以上代码，发现只需要用到四个变量存储即可，所以可以用一个长度为四的一维数组代替或四个变量代替，此处采用第一种
     */
    public int maxProfit2(int[] prices) {
        //一共四种状态，分别是第一次买入，第一次卖出，第二次买入，第二次卖出
        //dp[0]表示遍历到某天第一次买入花的钱，dp[1]表示第一次卖出赚的钱，dp[2]表示第二次买入花的钱，dp[3]表示第二次卖出赚的钱
        int[] dp = new int[4];
        //初始化
        dp[0] = prices[0];
        dp[1] = 0;
        dp[2] = prices[0];
        dp[3] = 0;

        for (int i = 1; i < prices.length; i++) {
            //比较买入价格，留下小的价格
            dp[0] = Math.min(dp[0], prices[i]);
            //比较卖出赚的钱，留下赚的多的
            dp[1] = Math.max(dp[1], prices[i] - dp[0]);
            //比较第二次买入价格，留下小的价格。由于是第二次买入，应该让总体的买入花的钱最少，所以应该减去第一次卖出赚的钱
            dp[2] = Math.min(dp[2], prices[i] - dp[1]);
            //比较第二次卖出赚的钱，留下赚的多的
            dp[3] = Math.max(dp[3], prices[i] - dp[2]);
        }
        return dp[3];
    }
}
